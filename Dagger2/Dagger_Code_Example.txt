Code Example

By Injecting constructor
========================

class Engine @Inject constructor()
class Wheel @Inject constructor()

class Car @Inject constructor(private var engine: engine, private var wheel: Wheel) {
    fun doWork() { Log.d("AXE", "Car Class Working...") }
}

@Component
interface CarComponent {
    fun getCarStatus() : Car
}

InMainActivity
    val component : CarComponent? = DaggerCarComponent.create()
    val status : Car? = component?.getCarStatus()
    status?.doWork()
    
---------------------------------------------------------------------------------------------------------------------------------------------------

By Injecting Field
==================

class Engine @Inject constructor()
class Wheel @Inject constructor()

class Car @Inject constructor(var engine: Engine, var wheel: Wheel) {
    fun showCarProperty(){
        Log.d("AXE", "Car has Engine and Wheel for running it")
    }
}

@Component
interface CarComponent {
    fun inject(mainActivity: MainActivity)
}

class MainActivity() : AppCom...(){

var car : Car? = null
        @Inject set              -------------------------------------------------------------> IMP , Very Imp


    onCreate(){
        DaggerCarComponent.create().inject(this)
        car?.showCarProperty()
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------
By Injecting Method
===================

class Engine @Inject constructor()
class Wheel @Inject constructor()

class Car @Inject constructor(var engine: Engine, var wheel: Wheel){
    @Inject
    fun isCarLock(remote: Remote?){
        remote?.isLock(this)
    }
}

class Remote @Inject constructor() {

    fun isLock(car: Car) {
        Log.d("AXE", "Remote car isLock method")
    }
}

@Component
interface CarComponent {
    fun inject(mainActivity: MainActivity)
}

class MainActivity : AppCompatActivity() {
    onCreate() {  
        DaggerCarComponent.create().inject(this) 
    }
}



---------------------------------------------------------------------------------------------------------------------------------------------------
Inject in Activity

class LoginActivity: Activity() {
    
    @Inject lateinit var loginViewModel: LoginViewModel         // You want Dagger to provide an instance of LoginViewModel from the graph

    override fun onCreate(savedInstanceState: Bundle?) {
        // Make Dagger instantiate @Inject fields in LoginActivity
        (applicationContext as MyApplication).appComponent.inject(this)
        
        // Now loginViewModel is available
        super.onCreate(savedInstanceState)
    }
}

class LoginViewModel @Inject constructor(private val userRepository: UserRepository) { ... }

---------------------------------------------------------------------------------------------------------------------------------------------------
@Module
class MyAppModule{
    
    @Provides
    fun myFunction() : Any { .... }
}

@Singleton
@Component(modules = [MyAppModule::class,MyAppSubComponent::class])
interface MyComponent {
    fun myFun() : Any
}

---------------------------------------------------------------------------------------------------------------------------------------------------
@Subcomponent
interface MyAppSubComponent{
    
    @Subcomponent
    interface MySubComponent{ fun show():Any }
    
    fun show():Any
}

---------------------------------------------------------------------------------------------------------------------------------------------------

Hilt Example 

@HiltAndroidApp
class MyOwnApplication : Application{
}

@AndroidEntryPoint
class MainActivity : AppCompatActivity{}

---------------------------------------------------------------------------------------------------------------------------------------------------

@Module
class classModule
{
    @Provides
    fun method() : ClassName { return ClassName() }
    
    ....
}

---------------------------------------------------------------------------------------------------------------------------------------------------
Example on @Module and @Provides

class Car @Inject constructor(var engine: Engine, var wheel: Wheel)
class Wheel @Inject constructor()
class Engine @Inject constructor(mainEngine: MainEngine, subEngine: SubEngine)

@Component (modules = [EngineModule::class])
interface CarComponent { fun inject(mainActivity: MainActivity) }

@Module
object EngineModule {

    @Provides
    fun provideMainEngine() : MainEngine = MainEngine()

    @Provides
    fun provideSubEngine() : SubEngine = SubEngine()

    @Provides
    fun engineProvider(mainEngine: MainEngine,subEngine: SubEngine) : Engine{
        mainEngine.showMainEngine()
        subEngine.showSubEngine()
        return Engine(mainEngine,subEngine)
    }
}

class SubEngine {
    fun showSubEngine() { Log.d("AXE", "showSubEngine method") }
}

class MainEngine(){
    fun showMainEngine() { Log.d("AXE", "showMainEngine method ") }
}

class MainActivity : AppCompatActivity() {

    var car: Car? = null
        @Inject set

    onCreate(...) { DaggerCarComponent.create().inject(this) }
}
---------------------------------------------------------------------------------------------------------------------------------------------------
@Provides , @Module, Freez/3rdParty Classes 

    - Freez Classes // This folder contains those classes which consider as API Classes / 3rd Party Classes / Read Only Classes
            - class Doctor()
            - class Engineer()
            

    - Classes
    
            class Human @Inject constructor(var male: Male, var female: Female) {
                fun humanWork(){ Log.d("AXE","Human Class Work Method") }
            }

            class Female @Inject constructor(var doctor: Doctor, var engineer: Engineer){
                fun showFemale() { Log.d("AXE","Show female method") }
            }

            class Male @Inject constructor(var doctor: Doctor, var engineer: Engineer){
                fun showMale() { Log.d("AXE","Show male method") }
            }
            
     
     
     - Interface
     
            @Component (modules = [MaleModule::class])
            interface HumanLives {
                fun doWork() : Human
                fun inject(mainActivity: MainActivity)
            }
            
            
      - Module Classes
            
            @Module
            object FemaleModule {
            
                @Provides
                fun providesFemaleDoctor() : Doctor = Doctor()

                @Provides
                fun providesFemaleEngineer() : Engineer = Engineer()

                /*** Doctor, Engineer, Collector these classes are made frozed i.e . consider as thired party classes
                 *   mean these classes are not editable it just read only hence provide them via modules
                 * */

                @Provides
                fun providesFemaleDesignations(doctor: Doctor, engineer: Engineer) : Female {
                    return Female(doctor, engineer)
                }
            }
        
        ================================================================================
        
        @Module
        object MaleModule {
        
            @Provides
            fun provideMaleDoctor() : Doctor = Doctor()

            @Provides
            fun provideMaleEngineer() : Engineer = Engineer()

            /*** Doctor, Engineer, Collector these classes are make frozen i.e . consider as thired party classes
             *   mean these classes are not editable it just read only hence provide them via modules
             * */

            @Provides
            fun providesMaleDesignations(doctor: Doctor,engineer: Engineer) : Male{
                return Male(doctor,engineer)
            }

        }
        
        
        ------------------------------------ MainActivity -------------------------------------------------
        
        class MainActivity : AppCompatActivity() {

            var human: Human? = null
                @Inject set

            onCreate(...) {
                val humanLives : HumanLives? = DaggerHumanLives.create()
                humanLives?.doWork()?.male?.showMale()              // Show male method
                humanLives?.doWork()?.female?.showFemale()          // Show female method

                DaggerHumanLives.create().inject(this)    // This useful for Field Injection

                human?.male?.showMale()                             // Show male method
                human?.female?.showFemale()                         // Show female method

                human?.humanWork()
            }
        }

        
---------------------------------------------------------------------------------------------------------------------------------------------------  
        
 Inject keyword use for create object of specific class so we can access all public methods of that class
 
 
 class Male @Inject constructor() { fun getMale(){....} }
 class Female @Inject constructor() { fun getFemale(){....} }
 
 class Human @Inject constructor(var male: Male, var female: Female) { fun getHuman(){ male.getMale(); female.getFemale(); } }
 
 @AndroidEntryPoint
 class MainActivity : AppCompatActivity
 {
    @Inject
    lateinit var human:Human            //Object create internally,

    onCreate(...) {
        ....
        human.getHuman()                // we can access method of it
    }
 }
































