//Dagger Dependency

implementation 'com.google.dagger:dagger:2.28.3'
annotationProcessor 'com.google.dagger:dagger-compiler:2.28'



________________________________________________________________________________________________________________________________________________________________________
Dagger Notes 

    - DI : Dependency Injection : One Class Depend on Other class
    - Dagger -> DAG -> Directed Acyclic Graph : 
        - It is a popular dependency injection library for Java, Kotlin, and Android that is maintained by Google.
        - It provides fully static and compile-time dependencies.

    - There are two major ways to do dependency injection
         1) Constructor Injection.   : You pass the dependencies of a class to its constructor
         2) Field Injection (or Setter Injection)  : When Dependency class initilised from current class object
    
    - DI by hand || Manual DI  :  You created, provided, and managed the dependencies of the different classes yourself, without relying on a library.
    - Drawback : - For big apps, taking all the dependencies and connecting them correctly can require a large amount of boilerplate code.
                 - In a multi-layered architecture, if object create for a top layer, you have create/provide dependencies of the layers below it.
                 - Solution (by automating the process of creating and providing dependencies by 2 ways)
                         - Reflection-based solutions : which connect dependencies at runtime.
                         - Static solutions : which generate the code to connect dependencies at compile time.
                         
      IMP :  Whenever you feel perticular class is creating without change at all time just create singleton for it and pass its reference
      
      
      
      
      
      
      
      
      
      
      
________________________________________________________________________________________________________________________________________________________________________
Hilt Notes : 
    - It is Jetpack's recommended library for dependency injection in Android
    - Hilt defines a standard way to do DI in your application by providing containers for every Android class in your project and managing their lifecycles automatically for you.
    - Use Hilt for dependency injection on Android. 
    - Hilt is built on top of Dagger and it provides a standard way to incorporate Dagger dependency injection into an Android application.






    

________________________________________________________________________________________________________________________________________________________________________
Annotations Explanation

    - @Inject     : lets Dagger know how to create instances of object (Way - 1)
    
    - @Component  : Tells Dagger to generate a container with all the dependencies required to satisfy the types, 
                    It contains a graph that consists objects that Dagger knows how to provide and their respective
                    Inside the @Component interface, you can define functions that return instances of the classes you need
                    
    - @Singleton  : This annotation tells dagger to return same instance of object without recreating it
    
    - @Binds      : Tell Dagger which implementation an interface should have.
    
    - @Module     : tell Dagger how to provide an instance of a class (Way - 2)
                  : It informs Dagger that this class is a Dagger Module
    
    - @Provides   : Tell Dagger how to provide classes that your project doesn't own.
                  : Class Annotated with @Module has anather annotation @Provides
                  
    - @Subcomponent : It informs Dagger this interface is a Dagger Subcomponent
 
 
           
            


 

_____________________________________________________________________________________________________________________________________________________________________
Code Example

Method -1 (By Injecting constructor)
====================================

class Male @Inject constructor()
class Female @Inject constructor()

class Human @Inject constructor(private var male: Male, private var female: Female) {
    fun doWork() { Log.d("AXE", "Human Class Working...") }
}

@Component
interface HumanComponent {
    fun getWorkingStatus() : Human
}

InMainActivity
    val component : HumanComponent? = DaggerHumanComponent.create()
    val status : Human? = component?.getWorkingStatus()
    status?.doWork()
    
---------------------------------------------------------------------------------------------------------------------------------------------------
Inject in Activity

class LoginActivity: Activity() {
    
    @Inject lateinit var loginViewModel: LoginViewModel         // You want Dagger to provide an instance of LoginViewModel from the graph

    override fun onCreate(savedInstanceState: Bundle?) {
        // Make Dagger instantiate @Inject fields in LoginActivity
        (applicationContext as MyApplication).appComponent.inject(this)
        
        // Now loginViewModel is available
        super.onCreate(savedInstanceState)
    }
}

class LoginViewModel @Inject constructor(private val userRepository: UserRepository) { ... }

---------------------------------------------------------------------------------------------------------------------------------------------------
@Module
class MyAppModule{
    
    @Provides
    fun myFunction() : Any { .... }
}

@Singleton
@Component(modules = [MyAppModule::class,MyAppSubComponent::class])
interface MyComponent {
    fun myFun() : Any
}

---------------------------------------------------------------------------------------------------------------------------------------------------
@Subcomponent
interface MyAppSubComponent{
    
    @Subcomponent
    interface MySubComponent{ fun show():Any }
    
    fun show():Any
}

---------------------------------------------------------------------------------------------------------------------------------------------------






