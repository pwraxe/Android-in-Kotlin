DI - Dependency Injection : One Class Depend on Other class
There are two major ways to do dependency injection
    1) Constructor Injection.   : You pass the dependencies of a class to its constructor
    2) Field Injection (or Setter Injection)  : When Dependency class initilised from current class object
       Ex 
            class Car {
                lateinit var engine: Engine
                fun start() { engine.start() }
            }
            fun main(args: Array) {
                val car = Car()
                car.engine = Engine()
                car.start()
            }
    
Dpendency injection by hand, or manual dependency injection
    - You created, provided, and managed the dependencies of the different classes yourself, without relying on a library.
    * Drawback : 
            - For big apps, taking all the dependencies and connecting them correctly can require a large amount of boilerplate code.
            - In a multi-layered architecture, if object create for a top layer, you have create/provide dependencies of the layers below it.
     
     - These Drawbacks solved by automating the process of creating and providing dependencies by two ways
     
            - Reflection-based solutions : which connect dependencies at runtime.
            - Static solutions : which generate the code to connect dependencies at compile time.
            
//Dagger Dependency
implementation 'com.google.dagger:dagger:2.28.3'
annotationProcessor 'com.google.dagger:dagger-compiler:2.28'


Dagger = DAG = Directed Acyclic Graph 

_____________________________________________________________________________________________________________________________________________________________________

Method -1 (By Injecting constructor)
====================================

class Male @Inject constructor()
class Female @Inject constructor()

class Human @Inject constructor(private var male: Male, private var female: Female) {
    fun doWork() { Log.d("AXE", "Human Class Working...") }
}

@Component
interface HumanComponent {
    fun getWorkingStatus() : Human
}

InMainActivity
    val component : HumanComponent? = DaggerHumanComponent.create()
    val status : Human? = component?.getWorkingStatus()
    status?.doWork()
    
____________________________________________________________________________________________________________________________________________________________________
Method - 2 (By Injecting Variable)

