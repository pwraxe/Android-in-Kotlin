//Dagger Dependency

implementation 'com.google.dagger:dagger:2.28.3'
implementation 'com.google.dagger:dagger-android:2.28'
implementation 'com.google.dagger:dagger-android-support:2.28' // if you use the support libraries
annotationProcessor 'com.google.dagger:dagger-android-processor:2.28'
annotationProcessor 'com.google.dagger:dagger-compiler:2.28'


Dependency Injection Steps (Ref. https://simplifiedcoding.in/course/android-dependency-injection-course/start/4)

#1 Add @Inject annotations to classes that you want to inject
#2 Create a module for the classes that cannot be constructor injected e.g. Interfaces
#3 Create Injectors for Activity/Fragments
#4 Create App Component
#5 Instantiate Dagger inside your application class, implement HasAndroidInjector and inject DispatchingAndroidInjector
#6 Use AndroidInjection.inject to inject dependencies with the help Inject annotation

________________________________________________________________________________________________________________________________________________________________________
Dagger Notes 

    - DI : Dependency Injection : One Class Depend on Other class
    - Dagger -> DAG -> Directed Acyclic Graph : 
        - It is a popular dependency injection library for Java, Kotlin, and Android that is maintained by Google.
        - Dagger is a fully static, compile-time dependency injection framework for Java, Kotlin, and Android

    - There are two major ways to do dependency injection
         1) Constructor Injection.   : You pass the dependencies of a class to its constructor
         2) Field Injection (or Setter Injection)  : When Dependency class initilised from current class object
    
    - DI by hand || Manual DI  :  You created, provided, and managed the dependencies of the different classes yourself, without relying on a library.
    - Drawback : - For big apps, taking all the dependencies and connecting them correctly can require a large amount of boilerplate code.
                 - In a multi-layered architecture, if object create for a top layer, you have create/provide dependencies of the layers below it.
                 - Solution (by automating the process of creating and providing dependencies by 2 ways)
                         - Reflection-based solutions : which connect dependencies at runtime.
                         - Static solutions : which generate the code to connect dependencies at compile time.
                         
      IMP :  Whenever you feel perticular class is creating without change at all time just create singleton for it and pass its reference 
      - ApplicationGraph : Representation and dependencies between classes makes applicationGraph .
     
      
-------------------------------------------------- Problem with Field Injection -------------------------------------------------------------- 
    - When you using Field Injection with Dagger   >  This cause InvocationTargetException || KaptWithoutKotlincTask$KaptExecutionWorkAction 
    if you use 
    @Inject 
    var name: ClassName    > This generates private variable automatically by dagger
    
    HEnce following is the solution
    - var car : Car? = null
          @Inject set
---------------------------------------------------------------------------------------------------------------------------------------------
      
      
      
      
      
      
      
________________________________________________________________________________________________________________________________________________________________________
Hilt Notes : 
    
    - To Add Hilt in Project Follow these steps (For more : https://developer.android.com/training/dependency-injection/hilt-android)
        1) Add Classpath :  classpath 'com.google.dagger:hilt-android-gradle-plugin:2.38.1'
        2) Apply Plugins :  apply plugin: 'dagger.hilt.android.plugin'
        3) Add Dependency:  
                - implementation "com.google.dagger:hilt-android:2.38.1"
                - kapt "com.google.dagger:hilt-compiler:2.38.1"
        4) Sync
        
    - It is Jetpack's recommended library for dependency injection in Android
    - Hilt defines a standard way to do DI in your application by providing containers for every Android class in your project and managing their lifecycles automatically for you.
    - Use Hilt for dependency injection on Android. 
    - Hilt is built on top of Dagger and it provides a standard way to incorporate Dagger dependency injection into an Android application.
    - It reduces the boilerplate of doing manual dependency injection in your project. 
    - Doing manual dependency injection requires you to construct every class and its dependencies by hand, and to use containers to reuse and manage dependencies.
    
    - Note: If you plan to use Hilt in your Project then Custom Application class should be ther with annotate as @HiltAndroidApp
    - If you annotate an Android class with @AndroidEntryPoint, then you also must annotate Android classes that depend on it.
    
    - At build time, Hilt generates Dagger components for Android classes. Then, Dagger walks through your code and performs the following steps:
        1) Builds and validates dependency graphs, ensuring that there are no unsatisfied dependencies and no dependency cycles.
        2) Generates the classes that it uses at runtime to create the actual objects and their dependencies.
    
    
    - Here We cant use @Inject annotations
        - you cannot constructor-inject an interface. 
        - You also cannot constructor-inject a type that you do not own,
      - Hilt Module is Class that annotate with @Module, It infoem Hilt How to provide instance of certain type
      - Annotate Hilt Module with @InstallIn to tell Hilt that Hoe each model of android class will be  use or install IN


    

________________________________________________________________________________________________________________________________________________________________________
Annotations Explanation

    - @Inject     : lets Dagger know how to create instances of object (Way - 1)
    
    - @Component  : Tells Dagger to generate a container with all the dependencies required to satisfy the types, 
                    It contains a graph that consists objects that Dagger knows how to provide and their respective
                    Inside the @Component interface, you can define functions that return instances of the classes you need
                    
    - @Singleton  : This annotation tells dagger to return same instance of object without recreating it
    
    - @Binds      : Tell Dagger which implementation an interface should have.
    
    - @Module     : tell Dagger how to provide an instance of a class (Way - 2)
                  : It informs Dagger that this class is a Dagger Module
    
    - @Provides   : Tell Dagger how to provide classes that your project doesn't own.
                  : Class Annotated with @Module has anather annotation @Provides
                  
    - @Subcomponent : It informs Dagger this interface is a Dagger Subcomponent
 
    - @HiltAndroidApp  :  triggers Hilt's code generation, including a base class for your application that serves as the application-level dependency container.
    
    - @AndroidEntryPoint :  generates an individual Hilt component for each Android class in your project.       
    
    - @InstallIn   :  It tell Hilt that How each model of android class will be used or installIn

    - @Qualifier   :  It use to identify a specific binding for a type when that type has multiple bindings defined.

 

_____________________________________________________________________________________________________________________________________________________________________
Code Example

Method -1 (By Injecting constructor)
====================================

class Engine @Inject constructor()
class Wheel @Inject constructor()

class Car @Inject constructor(private var engine: engine, private var wheel: Wheel) {
    fun doWork() { Log.d("AXE", "Car Class Working...") }
}

@Component
interface CarComponent {
    fun getCarStatus() : Car
}

InMainActivity
    val component : CarComponent? = DaggerCarComponent.create()
    val status : Car? = component?.getCarStatus()
    status?.doWork()




DaggerCarComponent Create 
      --------------------------
         - Its Private Constructor
         - private Builder class with its constructor
         - fun builder() : Builder{}
         - create() : CarComponent
         - Implement interface and override methods
         - build() : CarComponent
      
    
    
    
    
---------------------------------------------------------------------------------------------------------------------------------------------------
Inject in Activity

class LoginActivity: Activity() {
    
    @Inject lateinit var loginViewModel: LoginViewModel         // You want Dagger to provide an instance of LoginViewModel from the graph

    override fun onCreate(savedInstanceState: Bundle?) {
        // Make Dagger instantiate @Inject fields in LoginActivity
        (applicationContext as MyApplication).appComponent.inject(this)
        
        // Now loginViewModel is available
        super.onCreate(savedInstanceState)
    }
}

class LoginViewModel @Inject constructor(private val userRepository: UserRepository) { ... }

---------------------------------------------------------------------------------------------------------------------------------------------------
@Module
class MyAppModule{
    
    @Provides
    fun myFunction() : Any { .... }
}

@Singleton
@Component(modules = [MyAppModule::class,MyAppSubComponent::class])
interface MyComponent {
    fun myFun() : Any
}

---------------------------------------------------------------------------------------------------------------------------------------------------
@Subcomponent
interface MyAppSubComponent{
    
    @Subcomponent
    interface MySubComponent{ fun show():Any }
    
    fun show():Any
}

---------------------------------------------------------------------------------------------------------------------------------------------------

Hilt Example 

@HiltAndroidApp
class MyOwnApplication : Application{
}

@AndroidEntryPoint
class MainActivity : AppCompatActivity{}





