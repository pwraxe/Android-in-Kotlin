1. OneTimeWorkRequest
	if you don't want to send constrints to Worker Class
	{
		val manager = WorkManager.getInstance(context)
		val request = OneTimeWorkRequest.from(BackgroundWorkerClass::class.java)
		manager.enqueue(request)
	}
	
	

	if you want to send constraints to Worker Class
	{	  
		val constraint = Constraints.Builder()
            	.setRequiredNetworkType(NetworkType.CONNECTED)
		        .setRequiresCharging(true)
         	   	.build()
	
	//send data
        	val inputData = Data.Builder()
            	.putInt("INT_VAL",30)
            	//you can also put remaining parameter here like putInt
				.build()

		val request = OneTimeWorkRequestBuilder<BackgroundWorkerClass>()
            	// you can add new param or constraints here
            	.setConstraints(constraint)
				.setInputData(inputData)
				.build()
		manager.enqueue(request)
	}	

	// Observe Live Data From Worker class 
	// You can received Data here from background Worker Class with WorkInfo Reference
 
	manager.getWorkInfoByIdLiveData(request.id).observe(this,{it : WorkInfo!
		
		if you print workInfo then
	
		WorkInfo {
			mId='c5de4036-9f93-4b0d-9dd7-017e621ea4b1', 
			mState=SUCCEEDED, mOutputData=Data {TAN_VAL : 1.252169682142993, }, 
			mTags=[com.codexdroid.workmanagerstudy.BackgroundWork], 
			mProgress=Data {}
		}
        })
		
******************************************************************************************************************************************************
	
	if you want to send data to worker class 
	{
	
		MainActivity.kt
		{
			val manager = WorkManager.getInstance()
			
			val intArray = intArrayOf(1,2,3,6,5,4,7,8,9)
			val strArray = arrayOf("AAA","BBB","CCC","DDD")
			val doubleArray = doubleArrayOf(1.2,2.3,3.4,4.5,5.6,6.7,7.8)

			val data = Data.Builder()
					.putInt("INT",12345)
					.putBoolean("BOOL",false)
					.putDouble("DOUBLE",3.14)
					.putLong("LONG",9876543210)
					.putString("STR","Hello World!")
					.putIntArray("INT_ARR",intArray)
					.putStringArray("STR_ARR",strArray)
					.putDoubleArray("DUB_ARR",doubleArray)
					.build()

			val onetime = OneTimeWorkRequestBuilder<BackgroundWork>()
					.setInputData(data)
					.build()

			manager.enqueue(onetime)

			manager.getWorkInfoByIdLiveData(onetime.id).observe(this,{ workInfo ->
				Log.e("AXE","WorkInfo : $workInfo")
			})
		}
		-------------------------------------------------------------------------------------------
		BackgroundWork.kt
		{
			override fun doWork(): Result {

				return try {

					val data = inputData
					val intData = data.getInt("INT",0)
					val boolData = data.getBoolean("BOOL",false)
					val doubleData = data.getDouble("DOUBLE",0.0)
					val longData = data.getLong("LONG",0L)
					val strData = data.getString("STR")
					val intArrayData = data.getIntArray("INT_ARR")
					val strArrayData = data.getStringArray("STR_ARR")
					val doubleArrayData = data.getDoubleArray("DUB_ARR")


					val receivedData = "\nInt : $intData \n " +
							"Boolean : $boolData \n " +
							"Double : $doubleData \n " +
							"Long : $longData \n " +
							"String : $strData \n " +
							"Int Array : ${intArrayData?.toList()} \n " +
							"String Array : ${strArrayData?.toList()} \n " +
							"Double Array : ${doubleArrayData?.toList()}"

					Log.e("AXE","Data Received at Background : $receivedData")


					Result.success()

				}catch (ex : Exception){
					Result.failure()
				}
			}	
		}
		
		-------------------------------------------------------------------------------------------
		
		Output
		{
			
			E/AXE: WorkInfo : WorkInfo{mId='0afb9567-23ae-4aaf-815b-74a90e0fbc8b', mState=ENQUEUED, mOutputData=androidx.work.Data@0, mTags=[com.example.workmanagercontinue.BackgroundWork]}
			E/AXE: WorkInfo : WorkInfo{mId='0afb9567-23ae-4aaf-815b-74a90e0fbc8b', mState=RUNNING, mOutputData=androidx.work.Data@0, mTags=[com.example.workmanagercontinue.BackgroundWork]}
			E/AXE: Data Received at Background : 
				Int : 12345 
				Boolean : false 
				Double : 3.14 
				Long : 9876543210 
				String : Hello World! 
				Int Array : [1, 2, 3, 6, 5, 4, 7, 8, 9] 
				String Array : [AAA, BBB, CCC, DDD] 
				Double Array : [1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8]
				
			E/AXE: WorkInfo : WorkInfo{mId='0afb9567-23ae-4aaf-815b-74a90e0fbc8b', mState=SUCCEEDED, mOutputData=androidx.work.Data@0, mTags=[com.example.workmanagercontinue.BackgroundWork]}
		}
}
	
******************************************************************************************************************************************************
	
	if you want some data from worker class
	{
		MainActivity.kt
		{
			 val manager = WorkManager.getInstance()

			//we write this class becoz, I am not sending any param to background class
			val onetimeWork = OneTimeWorkRequest.from(BackgroundWork::class.java)

			manager.enqueue(onetimeWork)

			manager.getWorkInfoByIdLiveData(onetimeWork.id).observe(this, { workInfo ->

				//received data here
				val data =workInfo.outputData

				val intData = data.getInt("INT",0)
				val boolData = data.getBoolean("BOOL",false)
				val doubleData = data.getDouble("DOUBLE",0.0)
				val longData = data.getLong("LONG",0L)
				val strData = data.getString("STR")
				val intArrayData = data.getIntArray("INT_ARR")
				val strArrayData = data.getStringArray("STR_ARR")
				val doubleArrayData = data.getDoubleArray("DUB_ARR")


				val receivedData = "\nInt : $intData \n " +
						"Boolean : $boolData \n " +
						"Double : $doubleData \n " +
						"Long : $longData \n " +
						"String : $strData \n " +
						"Int Array : ${intArrayData?.toList()} \n " +
						"String Array : ${strArrayData?.toList()} \n " +
						"Double Array : ${doubleArrayData?.toList()}"

				Log.e("AXE","Data Received at MainActivity from Background on State ${workInfo.state} : $receivedData")

			})
		}
		
		-------------------------------------------------------------------------------------------
		
		BackgroundWork.kt
		{
			 override fun doWork(): Result {
				return try {

					val intArray = intArrayOf(9,8,7,6,5,4,3,2,1)
					val strArray = arrayOf("XXX","YYY","ZZZ")
					val doubleArray = doubleArrayOf(9.9,8.8,7.7,6.6,5.5,4.4,3.3,2.2,1.1)


					val data = Data.Builder()
						.putInt("INT",987654)
						.putBoolean("BOOL",true)
						.putDouble("DOUBLE",3.145)
						.putLong("LONG",9998877665544)
						.putString("STR","Hello World from Background!")
						.putIntArray("INT_ARR",intArray)
						.putStringArray("STR_ARR",strArray)
						.putDoubleArray("DUB_ARR",doubleArray)
						.build()

					Result.success(data)
				}catch (ex : Exception){
					Result.failure()
				}
			}
		}
		
		-------------------------------------------------------------------------------------------
		
		Output
		{
			E/AXE: Data Received at MainActivity from Background on State ENQUEUED : 
			Int : 0 
			Boolean : false 
			Double : 0.0 
			Long : 0 
			String : null 
			Int Array : null 
			String Array : null 
			Double Array : null
			
			E/AXE: Data Received at MainActivity from Background on State RUNNING : 
			Int : 0 
			Boolean : false 
			Double : 0.0 
			Long : 0 
			String : null 
			Int Array : null 
			String Array : null 
			Double Array : null
			
			E/AXE: Data Received at MainActivity from Background on State SUCCEEDED : 
			Int : 987654 
			Boolean : true 
			Double : 3.145 
			Long : 9998877665544 
			String : Hello World from Background! 
			Int Array : [9, 8, 7, 6, 5, 4, 3, 2, 1] 
			String Array : [XXX, YYY, ZZZ] 
			Double Array : [9.9, 8.8, 7.7, 6.6, 5.5, 4.4, 3.3, 2.2, 1.1]

		}
		
		
		
	}
	
******************************************************************************************************************************************************
	
	if you want to send 2 data and want addition from background class
	{
		MainActivity.kt
		{
			val manager = WorkManager.getInstance()

			val data = Data.Builder()
				.putInt("NUM1",45)
				.putInt("NUM2",45)
				.build()

			val oneTimeWork = OneTimeWorkRequestBuilder<BackgroundWork>()
				.setInputData(data)
				.build()

			manager.enqueue(oneTimeWork)

			manager.getWorkInfoByIdLiveData(oneTimeWork.id).observe(this,{ workInfo ->

				val addition = workInfo.outputData.getInt("SUM",0)
				Log.e("AXE","Addition from background at ${workInfo.state} : $addition")

			})
		}
		
		-------------------------------------------------------------------------------------------
		
		BackgroundWork.kt
		{
			 override fun doWork(): Result {
				return try {

					val num1 = inputData.getInt("NUM1",0)
					val num2 = inputData.getInt("NUM2",0)

					val sum = num1+num2

					val data = Data.Builder()
						.putInt("SUM",sum)
						.build()

					Result.success(data)

				}catch (ex : Exception){
					Result.failure()
				}
			}
		}
		
		-------------------------------------------------------------------------------------------
		
		Output 
		{
			E/AXE: Addition from background at ENQUEUED : 0
			E/AXE: Addition from background at RUNNING : 0
			E/AXE: Addition from background at SUCCEEDED : 90
		}
		
	}
	
******************************************************************************************************************************************************
	
	Case : called background class base on conditions (Constraints)
	{
		MainActivity.ktx
		{
			val manager = WorkManager.getInstance()

			val constraints = Constraints.Builder()
				.setRequiredNetworkType(NetworkType.CONNECTED)
				.setRequiresCharging(true)
				.build()

			val oneTimeWork = OneTimeWorkRequestBuilder<BackgroundWork>()
				.setConstraints(constraints)
				.build()

			manager.enqueue(oneTimeWork)

			manager.getWorkInfoByIdLiveData(oneTimeWork.id).observe(this,{ workInfo ->
				binding.textView.text = "${workInfo.state}"
			})
		}
		
		-----------------------------------------------------------------------------------------------------
		
		BackgroundWork.kt
		{
			override fun doWork(): Result 
			{
				return try 
				{
					repeat(50){
					Thread.sleep(500)
					Log.e("AXE","doWork fun : $it")
				}
				Result.success()
				}catch (ex : Exception){
					Result.failure()
				}
			}
		}
		
		-----------------------------------------------------------------------------------------------------
		
		
	}
	
******************************************************************************************************************************************************

******************************************************************************************************************************************************
	
	
-----------------------------------------------------------------------------------------------------
2. PeriodicWorkRequest

Add Dependency in build.gradle file

	def work_version = "1.0.1"
	implementation "android.arch.work:work-runtime-ktx:$work_version"



-----------Already Available Dependency in Work Manager Project ----------------



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // support libraries
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'

    // Android KTX
    implementation 'androidx.core:core-ktx:1.3.2'

    // constraint layout
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // navigation
    def nav_version = "1.0.0"
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"

    // coroutines for getting off the UI thread
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7"

    // retrofit for networking
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'

    // moshi for parsing the JSON format
    def moshi_version = "1.9.3"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // joda time library for dealing with time
    implementation 'joda-time:joda-time:2.10'

    // arch components
    // ViewModel and LiveData
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // glide for images
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    // Room dependency
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:$room_version"


    def work_version = "1.0.1"
    implementation "android.arch.work:work-runtime-ktx:$work_version"

}
-----------------------------------------------------------------------------------